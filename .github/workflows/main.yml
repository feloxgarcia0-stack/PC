name: RDP 100% Automático (CORREGIDO)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: 1. Habilitar RDP, Usuario y Sonido
        run: |
          $Password = "P@ssw0rdFeloxPC2025!"
          net user Runner $Password /add /y
          net localgroup administrators Runner /add
          net localgroup "Remote Desktop Users" Runner /add
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="Allow RDP" dir=in action=allow protocol=TCP localport=3389
          Set-Service -Name Audiosrv -StartupType Automatic
          Start-Service -Name Audiosrv
          echo "RDP_USER=Runner" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "RDP_PASSWORD=$Password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 2. Iniciar Túnel y Mantener Activo (Método Automático con Llave Secreta)
        env:
          # --- CORRECCIÓN CLAVE ---
          # El nombre correcto de la variable es PLAYIT_AGENT_SECRET
          PLAYIT_AGENT_SECRET: ${{ secrets.PLAYIT_SECRET_KEY }}
        run: |
          # Descarga una versión fija de playit.gg.
          Invoke-WebRequest -Uri 'https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe' -OutFile "playit.exe"
          
          # Inicia playit en segundo plano. Ahora SÍ usará la llave secreta.
          Start-Process -FilePath ".\playit.exe" -ArgumentList "" -NoNewWindow -RedirectStandardOutput "$env:TEMP\playit.log" -RedirectStandardError "$env:TEMP\playit_error.log"
          
          Write-Host "Esperando 30 segundos a que el túnel se autentique y se conecte..."
          Start-Sleep -Seconds 30
          
          # Busca DIRECTAMENTE la dirección final (host:puerto).
          $TunnelAddress = Get-Content "$env:TEMP\playit.log" -ErrorAction SilentlyContinue | Select-String -Pattern ".*\.playit\.gg:\d{1,5}" | ForEach-Object { $_.Matches.Value } | Select-Object -Last 1

          if (-not $TunnelAddress) {
            Write-Error "Error: No se pudo obtener la dirección del túnel. Revisa los logs de abajo para ver el problema."
            Write-Host "--- LOG DE ERRORES ---"
            Get-Content "$env:TEMP\playit_error.log" -ErrorAction SilentlyContinue
            Write-Host "--- LOG PRINCIPAL ---"
            Get-Content "$env:TEMP\playit.log" -ErrorAction SilentlyContinue
            exit 1
          }
          
          # Muestra la información y mantiene el paso vivo.
          Write-Host "================================================================="
          Write-Host "            ¡CONEXIÓN RDP LISTA PARA USAR!"
          Write-Host "================================================================="
          Write-Host "   Dirección (PC Name): $TunnelAddress"
          Write-Host "   Usuario:             ${{ env.RDP_USER }}"
          Write-Host "   Contraseña:          ${{ env.RDP_PASSWORD }}"
          Write-Host "================================================================="
          Write-Host ""
          Write-Host "Este paso se mantendrá en ejecución para mantener la VPS activa."

          # Bucle para mantener la conexión viva.
          while ($true) {
            Start-Sleep -Seconds 60
          }
